"""
Senior Data Scientist.: Dr. Eddy Giusepe Chirinos Isidro

Agente de not√≠cias baseado no tutorial de "Touseef Shaik"

Script: 5_news_agent.py
=======================
Este script cria um assistente de not√≠cias que busca not√≠cias 
sobre um determinado assunto usando a busca do DuckDuckGo. Ele 
tamb√©m reescreve as not√≠cias em artigos public√°veis.

Run
---
streamlit run 5_news_agent.py
"""
import asyncio
import nest_asyncio
nest_asyncio.apply()

from duckduckgo_search import DDGS
from agents import Agent, Runner, AsyncOpenAI, OpenAIChatCompletionsModel, function_tool
from datetime import datetime
import os
import streamlit as st

# Definir a data atual (formato ano-m√™s):
current_date = datetime.now().strftime("%Y-%m")

# Inicializar o modelo com sua chave API:
model = OpenAIChatCompletionsModel(
    model="llama-3.3-70b-versatile",
    openai_client=AsyncOpenAI(
        base_url="https://api.groq.com/openai/v1",
        api_key=os.environ.get("GROQ_API_KEY")
    )
)

# Definir a ferramenta de busca para buscar not√≠cias usando DuckDuckGo:
@function_tool
def get_news_articles(topic):
    st.info(f"Executando a busca de not√≠cias do DuckDuckGo para **{topic}**...")

    # Realizar a busca do DuckDuckGo::
    ddg_api = DDGS()
    results = ddg_api.text(f"{topic} {current_date}", max_results=3)

    if results:
        news_results = "\n\n".join(
            [
                f"**Title:** {result['title']}\n**URL:** {result['href']}\n**Description:** {result['body']}"
                for result in results
            ]
        )
        st.write(news_results)
        return news_results
    else:
        return f"N√£o foi poss√≠vel encontrar resultados de not√≠cias para **{topic}**."

# Criar um Agente de Not√≠cias que busca as not√≠cias:
news_agent = Agent(
    name="Assistente de Not√≠cias",
    instructions="""Voc√™ fornece as √∫ltimas not√≠cias sobre um determinado assunto usando a busca do DuckDuckGo.
                    As not√≠cias devem ser em portugu√™s brasileiro.
                    As not√≠cias devem ser as mais recentes poss√≠veis.
                    As not√≠cias devem ser as mais relevantes poss√≠veis.
                    """,
    tools=[get_news_articles],
    model=model
)

# Criar um Agente Editor que reescreve as not√≠cias em artigos public√°veis:
editor_agent = Agent(
    name="Assistente de Edi√ß√£o",
    instructions="""Reescreva e me d√™ um artigo de not√≠cias pronto para publica√ß√£o. Cada hist√≥ria de not√≠cias
                    deve ser em uma se√ß√£o separada (POR EXEMPLO: Pol√≠tica, Economia, Sociedade, Esportes, Cultura, etc.).
                 """,
    model=model
)

# Definir o fluxo de trabalho que executa ambos os agentes:
def run_news_workflow(topic):
    st.markdown("### Buscando Artigos de Not√≠cias...")

    # Passo 1: Buscar not√≠cias usando o agente de not√≠cias:
    news_response = Runner.run_sync(
        news_agent,
        f"Buscar as √∫ltimas not√≠cias sobre {topic} em {current_date}"
    )
    raw_news = news_response.final_output

    # Passo 2: Passar as not√≠cias brutas para o agente editor para finalizar o formato:
    st.markdown("### Editando os Artigos de Not√≠cias...")
    edited_news_response = Runner.run_sync(
        editor_agent,
        raw_news
    )
    edited_news = edited_news_response.final_output

    st.success("Artigo de not√≠cias pronto!")
    return edited_news

# Interface principal do Aplicativo Streamlit com uma IU aprimorada:
def main():
    # Barra lateral para instru√ß√µes e branding:
    st.sidebar.title("üë®‚Äçüíº Assistente de Not√≠cias üì∞")
    st.sidebar.markdown(
        """
        **Bem-vindo ao Assistente de Not√≠cias!**

        1. **Digite um assunto** no campo de entrada.
        2. **Clique em 'Buscar Not√≠cias'** para buscar e editar as √∫ltimas not√≠cias.
        3. Divirta-se com seu artigo de not√≠cias pronto para publica√ß√£o!
        """
    )
    st.sidebar.image("https://images.unsplash.com/photo-1566378246598-5b11a0d486cc?ixlib=rb-1.2.1&auto=format&fit=crop&w=400&q=80", caption="Mantenha-se Informado", use_container_width =True)

    # Estilo da p√°gina principal:
    st.markdown(
        """
        <style>
        .main-title {
            font-size: 3em;
            font-weight: bold;
            color: #4B8BBE;
            text-align: center;
            margin-bottom: 20px;
        }
        .sub-title {
            font-size: 1.5em;
            text-align: center;
            margin-bottom: 10px;
        }
        </style>
        """,
        unsafe_allow_html=True,
    )

    st.markdown('<div class="main-title">Assistente de not√≠cias</div>', unsafe_allow_html=True)
    st.markdown('<div class="sub-title">Buscar e transformar not√≠cias para seus assuntos favoritos!</div>', unsafe_allow_html=True)

    # Campo de entrada e bot√£o:
    topic = st.text_input("Digite um assunto para buscar not√≠cias:", placeholder="e.g., AI, Mudan√ßas Clim√°ticas, Explora√ß√£o Espacial, etc.")

    if st.button("Buscar Not√≠cias"):
        if topic:
            st.info(f"Buscando not√≠cias sobre **{topic}**...")
            try:
                with st.spinner("Buscando e editando artigos de not√≠cias..."):
                    news_content = run_news_workflow(topic)
                    st.markdown("### Artigo de Not√≠cias Final:")
                    st.markdown(news_content)
            except Exception as e:
                st.error(f"Erro ao buscar not√≠cias: {str(e)}")
        else:
            st.warning("Por favor, digite um assunto para buscar.")




if __name__ == "__main__":
    main()