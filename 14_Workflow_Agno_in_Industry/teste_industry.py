#! /usr/bin/env python3
"""
Senior Data Scientist.: Dr. Eddy Giusepe Chirinos Isidro
"""
from agno.agent import Agent
from agno.models.openai import OpenAIChat
from agno.tools import tool
from agno.workflow.v2 import Workflow, Step, Condition, Parallel
from agno.storage.sqlite import SqliteStorage
from datetime import datetime
import json

import sys
import os
# Adiciona o diret√≥rio raiz do projeto ao PATH do Python:
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from config.settings import OPENAI_API_KEY

# 1. FERRAMENTAS PERSONALIZADAS PARA IND√öSTRIA

@tool
def verificar_temperatura_forno(forno_id: str) -> dict:
    """Verifica temperatura atual do forno industrial"""
    # Simula√ß√£o - conectaria com sistema real
    import random
    temp = random.randint(800, 1200)
    return {
        "forno_id": forno_id,
        "temperatura": temp,
        "status": "normal" if 850 <= temp <= 1150 else "alerta",
        "timestamp": datetime.now().isoformat()
    }

@tool
def verificar_qualidade_produto(lote_id: str) -> dict:
    """Executa controle de qualidade do lote"""
    import random
    qualidade = random.choice(["aprovado", "reprovado", "retrabalho"])
    return {
        "lote_id": lote_id,
        "resultado": qualidade,
        "defeitos": random.randint(0, 5) if qualidade != "aprovado" else 0,
        "timestamp": datetime.now().isoformat()
    }

@tool
def ajustar_parametros_maquina(maquina_id: str, parametros: dict) -> dict:
    """Ajusta par√¢metros da m√°quina"""
    return {
        "maquina_id": maquina_id,
        "parametros_ajustados": parametros,
        "status": "ajustado",
        "timestamp": datetime.now().isoformat()
    }

# 2. AGENTES ESPECIALIZADOS

# Agent para monitoramento
monitor_agent = Agent(
    name="Monitor Industrial",
    model=OpenAIChat(id="gpt-4o-mini", api_key=OPENAI_API_KEY),
    tools=[verificar_temperatura_forno, verificar_qualidade_produto],
    #markdown=True,
    instructions="""
    Voc√™ √© um especialista em monitoramento industrial. SEMPRE responda EXCLUSIVAMENTE em portugu√™s brasileiro.
    - Monitore equipamentos continuamente
    - Identifique anomalias e alertas
    - Forne√ßa relat√≥rios claros sobre status
    - OBRIGAT√ìRIO: Use apenas portugu√™s brasileiro em todas as respostas
    - PROIBIDO: Nunca use palavras em ingl√™s ou outras l√≠nguas
    - Todas as suas respostas devem ser 100% em portugu√™s do Brasil
    """
)

# Agent para controle de qualidade
qualidade_agent = Agent(
    name="Controle de Qualidade",
    model=OpenAIChat(id="gpt-4o-mini", api_key=OPENAI_API_KEY),
    tools=[verificar_qualidade_produto],
    #markdown=True,
    instructions="""
    Voc√™ √© respons√°vel pelo controle de qualidade. SEMPRE responda EXCLUSIVAMENTE em portugu√™s brasileiro.
    - Analise resultados de testes
    - Classifique produtos (aprovado/reprovado/retrabalho)
    - Identifique padr√µes de defeitos
    - OBRIGAT√ìRIO: Use apenas portugu√™s brasileiro em todas as respostas
    - PROIBIDO: Nunca use palavras em ingl√™s ou outras l√≠nguas
    - Todas as suas respostas devem ser 100% em portugu√™s do Brasil
    """
)

# Agent para manuten√ß√£o
manutencao_agent = Agent(
    name="Sistema de Manuten√ß√£o",
    model=OpenAIChat(id="gpt-4o-mini", api_key=OPENAI_API_KEY),
    tools=[ajustar_parametros_maquina],
    #markdown=True,
    instructions="""
    Voc√™ gerencia manuten√ß√£o e ajustes. SEMPRE responda EXCLUSIVAMENTE em portugu√™s brasileiro.
    - Execute ajustes preventivos
    - Responda a alertas de equipamentos
    - Otimize par√¢metros de produ√ß√£o
    - OBRIGAT√ìRIO: Use apenas portugu√™s brasileiro em todas as respostas
    - PROIBIDO: Nunca use palavras em ingl√™s ou outras l√≠nguas
    - Todas as suas respostas devem ser 100% em portugu√™s do Brasil
    """
)

# 3. FUN√á√ïES DE AVALIA√á√ÉO PARA WORKFLOW

def precisa_manutencao(step_input) -> bool:
    """Avalia se equipamento precisa manuten√ß√£o"""
    try:
        # Analisa resultado do monitoramento
        content = step_input.previous_step_content
        return "alerta" in content.lower() or "problema" in content.lower()
    except:
        return False

def qualidade_aprovada(step_input) -> bool:
    """Verifica se qualidade foi aprovada"""
    try:
        content = step_input.previous_step_content
        return "aprovado" in content.lower()
    except:
        return False

# 4. WORKFLOW INDUSTRIAL COMPLETO

workflow_industrial = Workflow(
    name="Sistema de Produ√ß√£o Industrial",
    description="Workflow completo de monitoramento, qualidade e manuten√ß√£o",
    storage=SqliteStorage(
        table_name="producao_industrial",
        db_file="tmp/industrial.db",
        mode="workflow_v2"
    ),
    steps=[
        # Etapa 1: Monitoramento paralelo
        Parallel(
            Step(
                name="monitorar_forno",
                agent=monitor_agent,
                description="Monitorar temperatura dos fornos"
            ),
            Step(
                name="controle_qualidade",
                agent=qualidade_agent,
                description="Verificar qualidade dos produtos"
            ),
            name="monitoramento_paralelo",
            description="Monitoramento simult√¢neo de equipamentos e qualidade"
        ),
        
        # Etapa 2: Manuten√ß√£o condicional
        Condition(
            name="verificar_manutencao",
            description="Executar manuten√ß√£o se necess√°rio",
            evaluator=precisa_manutencao,
            steps=[
                Step(
                    name="executar_manutencao",
                    agent=manutencao_agent,
                    description="Executar ajustes e manuten√ß√£o"
                )
            ]
        ),
        
        # Etapa 3: Reprocessamento condicional
        Condition(
            name="verificar_reprocessamento",
            description="Reprocessar se qualidade n√£o aprovada",
            evaluator=lambda x: not qualidade_aprovada(x),
            steps=[
                Step(
                    name="reprocessar",
                    agent=qualidade_agent,
                    description="Reprocessar lote com problemas"
                )
            ]
        )
    ]
)

# 5. EXECU√á√ÉO DO SISTEMA

if __name__ == "__main__":
    print("üè≠ Iniciando Sistema Industrial Agno")
    print("=" * 50)
    
    # Simular ciclo de produ√ß√£o
    resultado = workflow_industrial.run(
        message="Iniciar ciclo de produ√ß√£o - Lote L001, Forno F001. IMPORTANTE: Responder APENAS em portugu√™s brasileiro, nunca usar palavras em ingl√™s.",
        stream=True
    )
    
    print("\nüìä Relat√≥rio do Ciclo:")
    
    # Coleta todo o conte√∫do do stream
    conteudo_completo = ""
    for response in resultado:
        if hasattr(response, 'content') and response.content:
            conteudo_completo += response.content
    
    # Imprime o conte√∫do completo de uma vez
    print(conteudo_completo)
            